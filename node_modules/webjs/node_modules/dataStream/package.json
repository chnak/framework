{
  "author": {
    "name": "Will Wen Gunn",
    "email": "willwengunn@gmail.com",
    "url": "http://im1996.com"
  },
  "name": "dataStream",
  "description": "Simple stream piper",
  "version": "0.0.5",
  "repository": {
    "url": ""
  },
  "main": "index",
  "engines": {
    "node": ">=0.4.0"
  },
  "dependencies": {
    "bufferhelper": "*"
  },
  "devDependencies": {},
  "_npmUser": {
    "name": "iwillwen",
    "email": "willwengunn@gmail.com"
  },
  "readme": "# node-dataStream\n\nSimple and Powerful data stream on Node.js IO.\n\n## Installation\n\nYou just install it from [npm](http://npmjs.com).\n\n```shell\nnpm install dataStream\n```\n\nAnd then use it!\n\n## Usage\n\nYou can use dataStream to control any stream like [jQuery Ajax](http://api.jquery.com/jQuery.ajax/).\n\n```js\n// Simple Stream\nvar dataStream = require('dataStream');\nvar fs         = require('fs');\n\nvar stream = new dataStream();\nstream.on('complete', function(body) {\n  // Do with the loaded data\n});\n\nfs.createReadStream(__dirname + '/example.txt').pipe(stream);/* .pipe(anyStream); */\n```\n\n\nYou can also use it control the data in any stream before it flow to the next stream.\n\n```js\nvar dataStream = require('dataStream');\nvar fs         = require('fs');\n\nvar stream = new dataStream({\n  data: function(chunk) {\n    // convert the Buffer to a String\n    chunk = chunk.toString();\n    chunk += '\\n';\n\n    return chunk;\n  }\n});\n\nfs.createReadStream(__dirname + '/example.txt').pipe(stream);\n```\n\nOf course, you can set the properties `writable` and `readable` too.\n\n```js\n// Simple Stream\nvar dataStream = require('dataStream');\nvar fs         = require('fs');\n\nvar stream = new dataStream({ readable: false });\nstream.on('complete', function(body) {\n  // Do with the loaded data\n});\n\nfs.createReadStream(__dirname + '/example.txt').pipe(stream); /* the stream can not pipe to any other stream */\n```\n\n## API\n\n### Properties\n\n#### writable [true/false]\n\nIf this property is true, it will make the stream can not be writed.\n\n```js\nvar dataStream = require('dataStream');\n\nvar stream = new dataStream({ writable: false });\n```\n\n#### readable [true/false]\n\nNow the stream can not pipe to any other stream.\n\n```js\nvar dataStream = require('dataStream');\n\nvar stream = new dataStream({ readable: false });\n```\n\n#### data [Function]\n\nThe property can make the stream be a custom process factory.\n\n```js\nvar dataStream = require('dataStream');\n\nvar stream = new dataStream({\n  data: function(chunk) {\n    // Do something with the chunk object\n    return chunk;\n  }\n});\n```\n\n---\n\n### Methods\n\n#### .write(data)\n\nPut some data into the stream and fire a `'data'` event with the data.\n\n```js\nstream.write('Will Wen Gunn is a baka!');\n```\n\n### .end(data)\n\nEnd the stream flows and fire a `'end'` event.\n\n```js\nstream.end();\n// stream.end('End');\n```\n\n### .body()\n\nReturn the data which the stream received.\n\n```js\nstream.write('DATA');\nstream.end('DATA');\n\nstream.body().toString(); //-> DATADATA\n```\n\n### .pause()\n\nCopied from Node.js offical documentation.\n\nIssues an advisory signal to the underlying communication layer, requesting that no further data be sent until `resume()` is called.\n\nNote that, due to the advisory nature, certain streams will not be paused immediately, and so `'data'` events may be emitted for some indeterminate period of time even after `pause()` is called. You may wish to buffer such `'data'` events.\n\n### .resume()\n\nCopied from Node.js offical documentation.\n\nResumes the incoming `'data'` events after a `pause()`.\n\n### .destory()\n\nCopied from Node.js offical documentation.\n\nCloses the underlying file descriptor. Stream is no longer writable nor readable. The stream will not emit any more 'data', or 'end' events. Any queued write data will not be sent. The stream should emit 'close' event once its resources have been disposed of.\n\n### .pipe(destination, [options])\n\nCopied from Node.js offical documentation.\n\n* `destination` {Writable Stream}\n* `options` {Object} Optional\n  * `end` {Boolean} Default=true\n\nConnects this readable stream to `destination` WriteStream. Incoming\ndata on this stream gets written to `destination`.  Properly manages\nback-pressure so that a slow destination will not be overwhelmed by a\nfast readable stream.\n\nThis function returns the `destination` stream.\n\nFor example, emulating the Unix `cat` command:\n\n    process.stdin.pipe(process.stdout);\n\nBy default `end()` is called on the destination when the source stream\nemits `end`, so that `destination` is no longer writable. Pass `{ end:\nfalse }` as `options` to keep the destination stream open.\n\nThis keeps `writer` open so that \"Goodbye\" can be written at the\nend.\n\n    reader.pipe(writer, { end: false });\n    reader.on(\"end\", function() {\n      writer.end(\"Goodbye\\n\");\n    });\n\nNote that `process.stderr` and `process.stdout` are never closed until\nthe process exits, regardless of the specified options.\n\n---\n\n### Events\n\n#### data (chunk {Buffer})\n\nWhen some data is put into the stream, a `'data'` event would be fired.\n\n```js\nvar dataStream = require('dataStream');\n\nvar stream = new dataStream();\n\nstream.on('data', function(chunk) {\n  // Foobar\n});\n```\n\n#### end\n\nWhen a `.end()` called, a `'end'` event would be fired.\n\n```js\nvar dataStream = require('dataStream');\n\nvar stream = new dataStream();\n\nstream.on('end', function() {\n  // Foobar\n});\n```\n\n#### complete (body {String})\n\nWhen the stream is completed, a `'complete'` event would be fired.\n\n```js\nvar dataStream = require('dataStream');\n\nvar stream = new dataStream();\n\nstream.on('complete', function(body) {\n  // Do something with the data\n});\n```\n\n## License\n\n(The BSD License)\n\n    Copyright 2013 (c) Will Wen Gunn willwengunn@gmail.com\n\n    Redistribution and use in source and binary forms, with or without\n    modification, are permitted provided that the following conditions\n    are met:\n\n        * Redistributions of source code must retain the above\n          copyright notice, this list of conditions and the following\n          disclaimer.\n\n        * Redistributions in binary form must reproduce the above\n          copyright notice, this list of conditions and the following\n          disclaimer in the documentation and/or other materials\n          provided with the distribution.\n\n    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER “AS IS” AND ANY\n    EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n    PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER BE\n    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,\n    OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n    PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n    PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n    THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR\n    TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF\n    THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n    SUCH DAMAGE.",
  "readmeFilename": "README.md",
  "_id": "dataStream@0.0.5",
  "_from": "dataStream@latest"
}
